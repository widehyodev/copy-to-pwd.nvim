*copy_to_pwd.txt*        For Neovim >= 0.8.0       Last change: 2025 August 24

==============================================================================
Table of Contents                              *copy_to_pwd-table-of-contents*

1. copy-to-pwd.nvim                             |copy_to_pwd-copy-to-pwd.nvim|
  - Features                           |copy_to_pwd-copy-to-pwd.nvim-features|
  - Installation                   |copy_to_pwd-copy-to-pwd.nvim-installation|
  - Usage                                 |copy_to_pwd-copy-to-pwd.nvim-usage|
  - Configuration                 |copy_to_pwd-copy-to-pwd.nvim-configuration|
  - Use Cases                         |copy_to_pwd-copy-to-pwd.nvim-use-cases|
  - Examples                           |copy_to_pwd-copy-to-pwd.nvim-examples|
  - Requirements                   |copy_to_pwd-copy-to-pwd.nvim-requirements|
  - Contributing                   |copy_to_pwd-copy-to-pwd.nvim-contributing|
  - License                             |copy_to_pwd-copy-to-pwd.nvim-license|
  - Acknowledgments             |copy_to_pwd-copy-to-pwd.nvim-acknowledgments|
2. Links                                                   |copy_to_pwd-links|

==============================================================================
1. copy-to-pwd.nvim                             *copy_to_pwd-copy-to-pwd.nvim*



A simple yet powerful Neovim plugin that allows you to quickly copy the current
buffer’s content to a file in your present working directory (pwd).


FEATURES                               *copy_to_pwd-copy-to-pwd.nvim-features*

- **Quick File Copying**Copy current buffer content to pwd with a single command
- **Smart Filename Detection**Automatically uses current buffer’s filename as default
- **Custom Filename Support**Specify a different filename when copying
- **Overwrite Protection**Confirms before overwriting existing files
- **User-Friendly**Provides clear notifications and error messages
- **Configurable**Customize behavior through setup options
- **Zero Dependencies**Pure Lua implementation with no external dependencies


INSTALLATION                       *copy_to_pwd-copy-to-pwd.nvim-installation*


USING LAZY.NVIM ~

>lua
    {
      "widehyodev/copy-to-pwd.nvim",
      config = function()
        require("copy_to_pwd").setup()
      end,
    }
<


USING PACKER.NVIM ~

>lua
    use {
      "widehyodev/copy-to-pwd.nvim",
      config = function()
        require("copy_to_pwd").setup()
      end,
    }
<


USING VIM-PLUG ~

>vim
    Plug 'widehyodev/copy-to-pwd.nvim'
<

Then add to your init.lua:

>lua
    require("copy_to_pwd").setup()
<


USAGE                                     *copy_to_pwd-copy-to-pwd.nvim-usage*


COMMANDS ~

- `:CopyToPwd` - Copy current buffer to pwd using current filename
- `:CopyToPwd filename.txt` - Copy current buffer to pwd with specified filename


DEFAULT KEYMAPPING ~

- `<leader>cpwd` - Opens command line with `:CopyToPwd` ready for filename input


LUA API ~

>lua
    local copy_to_pwd = require("copy_to_pwd")
    
    -- Copy with default filename
    copy_to_pwd.copy_to_pwd()
    
    -- Copy with custom filename
    copy_to_pwd.copy_to_pwd("my_file.lua")
    
    -- Get information about current copy operation
    local info = copy_to_pwd.get_info()
    print(info.current_file, info.pwd, info.target_path)
<


CONFIGURATION                     *copy_to_pwd-copy-to-pwd.nvim-configuration*

>lua
    require("copy_to_pwd").setup({
      -- Whether to confirm before overwriting existing files (default: true)
      confirm_overwrite = true,
      
      -- Whether to show notification on successful copy (default: true)
      notify_on_success = true,
      
      -- Whether to set up default keymap <leader>cpwd (default: true)
      default_keymap = true,
    })
<


CONFIGURATION OPTIONS ~

  ---------------------------------------------------------------------------
  Option              Type        Default           Description
  ------------------- ----------- ----------------- -------------------------
  confirm_overwrite   boolean     true              Ask for confirmation
                                                    before overwriting
                                                    existing files

  notify_on_success   boolean     true              Show notification when
                                                    file is successfully
                                                    copied

  default_keymap      boolean     true              Set up default keymap
                                                    <leader>cpwd
  ---------------------------------------------------------------------------

USE CASES                             *copy_to_pwd-copy-to-pwd.nvim-use-cases*

1. **Quick File Duplication**Duplicate a file in your current working directory
2. **Template Creation**Copy template files to your project directory
3. **Backup Creation**Create quick backups of important files
4. **File Organization**Copy files from various locations to a central directory
5. **Development Workflow**Copy configuration files or scripts to project root


EXAMPLES                               *copy_to_pwd-copy-to-pwd.nvim-examples*


EXAMPLE 1: COPY CURRENT FILE WITH SAME NAME ~

>
    :CopyToPwd
<

If you’re editing `/home/user/projects/myproject/src/utils.lua` and your pwd
is `/home/user/projects/myproject`, this will create
`/home/user/projects/myproject/utils.lua`.


EXAMPLE 2: COPY WITH DIFFERENT NAME ~

>
    :CopyToPwd backup_utils.lua
<

This creates `/home/user/projects/myproject/backup_utils.lua`.


EXAMPLE 3: USING KEYMAP ~

Press `<leader>cpwd`, then type the desired filename and press Enter.


REQUIREMENTS                       *copy_to_pwd-copy-to-pwd.nvim-requirements*

- Neovim >= 0.8.0
- No external dependencies


CONTRIBUTING                       *copy_to_pwd-copy-to-pwd.nvim-contributing*

Contributions are welcome! Please feel free to submit a Pull Request.


LICENSE                                 *copy_to_pwd-copy-to-pwd.nvim-license*

This project is licensed under the MIT License - see the LICENSE <LICENSE> file
for details.


ACKNOWLEDGMENTS                 *copy_to_pwd-copy-to-pwd.nvim-acknowledgments*

- Inspired by common file management needs in Neovim workflows
- Built with the Neovim Lua API

==============================================================================
2. Links                                                   *copy_to_pwd-links*

1. *Lua*: https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&logo=lua
2. *Neovim*: https://img.shields.io/badge/NeoVim-%2357A143.svg?&style=for-the-badge&logo=neovim&logoColor=white

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
